name: ECR Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'
  ECR_REPO: '99problems'
  IMAGE_TAG: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Ensure ECR repository exists
      id: ecr-repo
      run: |
        if aws ecr describe-repositories --repository-names ${{ env.ECR_REPO }} >/dev/null 2>&1; then
          echo "Repository exists"
          echo "repository_uri=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPO }} --query 'repositories[0].repositoryUri' --output text)" >> $GITHUB_OUTPUT
        else
          echo "Creating new repository"
          echo "repository_uri=$(aws ecr create-repository --repository-name ${{ env.ECR_REPO }} --query 'repository.repositoryUri' --output text)" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker image
      run: |
        docker build -t ${{ steps.ecr-repo.outputs.repository_uri }}:${{ env.IMAGE_TAG }} .

    - name: Push Docker image
      run: |
        docker push ${{ steps.ecr-repo.outputs.repository_uri }}:${{ env.IMAGE_TAG }}
        echo "Image successfully pushed to ECR"
        echo "image_uri=${{ steps.ecr-repo.outputs.repository_uri }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Verify pushed image
      run: |
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPO }} \
          --image-ids imageTag=${{ env.IMAGE_TAG }}