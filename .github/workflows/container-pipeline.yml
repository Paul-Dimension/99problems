name: Container Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'
  ECR_REPO: ${{ github.repository }}
  IMAGE_TAG: 'latest'

jobs:
  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}

  deploy-to-staging:
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest
    environment: Staging
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify ECR image
      run: |
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPO }} \
          --image-ids imageTag=${{ env.IMAGE_TAG }}

  deploy-to-production:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Trigger App Runner deployment
      run: |
        aws apprunner start-deployment \
          --service-arn "${{ vars.PRODUCTION_SERVICE_ARN }}"