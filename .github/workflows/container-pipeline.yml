name: Container Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'
  ECR_REPO: '99problems'
  IMAGE_TAG: 'latest'

jobs:
  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Create ECR repository if not exists
      run: |
        if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPO }} >/dev/null 2>&1; then
          aws ecr create-repository --repository-name ${{ env.ECR_REPO }}
          echo "Repository ${{ env.ECR_REPO }} created"
        else
          echo "Repository ${{ env.ECR_REPO }} already exists"
        fi

    - name: Build Docker image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }} .

    - name: Push Docker image
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
        echo "Image pushed to ECR: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}"

    - name: Verify image in ECR
      run: |
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPO }} \
          --image-ids imageTag=${{ env.IMAGE_TAG }}
    
    - name: Debug ECR repositories
      run: |
        aws ecr describe-repositories
        aws ecr describe-images --repository-name ${{ env.ECR_REPO }} || echo "No images in repository"